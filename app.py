import streamlit as st
from transformers import pipeline, AutoTokenizer, AutoModelForTokenClassification
import torch
import os

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
# 1. –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –ø—É—Ç—è–º–∏ –∫ –≤–∞—à–∏–º —Ç—Ä–µ–º –º–æ–¥–µ–ª—è–º.
#    –ö–ª—é—á - —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —É–≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
#    –ó–Ω–∞—á–µ–Ω–∏–µ - —ç—Ç–æ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏ –º–æ–¥–µ–ª–∏.
#    !!! –£–ë–ï–î–ò–¢–ï–°–¨, –ß–¢–û –≠–¢–ò –ü–£–¢–ò –í–ï–†–ù–´–ï !!!
MODELS = {
    "–ë–µ–π—Å (Base)": "models/best_model",
    "–ò–†–ú (IRM)": "models/trained_model_irm",
    "–ë–ò–†–ú (BIRM)": "models/trained_model_birm/trained_model_birm",
}
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: GPU, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ, –∏–Ω–∞—á–µ CPU
DEVICE = 0 if torch.cuda.is_available() else -1

# --- CSS –°—Ç–∏–ª–∏ –¥–ª—è —ç—Å—Ç–µ—Ç–∏–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
page_style = """
<style>
/* –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–Ω –∏ —à—Ä–∏—Ñ—Ç */
body, .main {
    background-color: #2c2f38;
    color: #e0e0e0;
}
h1, h2, h3 {
    color: #6c73ff;
    font-family: 'Segoe UI', sans-serif;
}
/* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫ –Ω–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ */
.stRadio [role=radiogroup]{
    align-items: stretch;
    border-radius: 10px;
    padding: 10px;
    background-color: #34374f;
}
.stRadio [role=radio] {
    margin: 5px;
}

/* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ */
.stTextArea textarea {
    background-color: #34374f;
    color: #e0e0e0;
    border: 1px solid #4a4e69;
    border-radius: 10px;
    font-family: 'Consolas', 'Menlo', 'monospace';
    font-size: 16px;
    padding: 15px;
}

/* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ */
.stButton>button {
    background-color: #6c73ff;
    color: white;
    border-radius: 10px;
    border: none;
    padding: 10px 20px;
    font-weight: bold;
    width: 100%; /* –ö–Ω–æ–ø–∫–∞ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É */
}
.stButton>button:hover {
    background-color: #5a61e0;
    color: white;
}

/* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –≤—ã–≤–æ–¥–∞ */
.result-box {
    background-color: #34374f;
    padding: 20px;
    border-radius: 10px;
    border-left: 5px solid #6c73ff;
    margin-top: 20px;
    font-family: 'Consolas', 'Menlo', 'monospace';
    font-size: 16px;
    line-height: 1.6;
    white-space: pre-wrap; /* –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ */
    word-wrap: break-word; /* –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ */
}

/* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π */
.entity-table {
    margin-top: 25px;
}
.entity-table th {
    background-color: #4a4e69;
    color: #e0e0e0;
    text-align: left;
}
.entity-table td {
    border-bottom: 1px solid #4a4e69;
}
</style>
"""

# --- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ ---
# Streamlit –±—É–¥–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ `path`
@st.cache_resource
def load_model(path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏ –∏ –∫—ç—à–∏—Ä—É–µ—Ç –∏—Ö."""
    st.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏–∑ –ø–∞–ø–∫–∏: '{path}'...")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—É—Ç—å
    if not os.path.isdir(path):
        st.error(f"–û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ —Å –º–æ–¥–µ–ª—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏ '{path}'.")
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ MODELS –≤ —Ñ–∞–π–ª–µ app.py.")
        return None
    try:
        model = AutoModelForTokenClassification.from_pretrained(path)
        tokenizer = AutoTokenizer.from_pretrained(path)
        pii_pipeline = pipeline(
            "token-classification",
            model=model,
            tokenizer=tokenizer,
            aggregation_strategy="simple",
            device=DEVICE,
        )
        st.success(f"–ú–æ–¥–µ–ª—å –∏–∑ '{path}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
        return pii_pipeline
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –∏–∑ '{path}': {e}")
        st.warning("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –ø–∞–ø–∫–µ –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã (config.json, model.safetensors, tokenizer.json –∏ —Ç.–¥.)")
        return None

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è ---
def mask_log(pii_pipeline, text):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç, –Ω–∞—Ö–æ–¥–∏—Ç PII –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π."""
    if not text:
        return "", []

    entities = pii_pipeline(text)
    sorted_entities = sorted(entities, key=lambda e: e["start"], reverse=True)
    
    masked_text = text
    found_pii = []
    
    for entity in sorted_entities:
        label = entity["entity_group"]
        value = entity["word"]
        start = entity["start"]
        end = entity["end"]
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä [PASSWORD]
        mask = f"[{label.upper()}]"
        
        masked_text = masked_text[:start] + mask + masked_text[end:]
        found_pii.append({"–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö": label.upper(), "–ù–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ": value})
        
    return masked_text, sorted(found_pii, key=lambda x: text.find(x["–ù–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"]))


# --- –ò–ù–¢–ï–†–§–ï–ô–° STREAMLIT ---

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(layout="wide", page_title="PII –î–µ—Ç–µ–∫—Ç–æ—Ä")

# –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—à–∏ —Å—Ç–∏–ª–∏
st.markdown(page_style, unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("–î–µ—Ç–µ–∫—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ª–æ–≥–∞—Ö")

# --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
selected_model_name = st.sidebar.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
    options=list(MODELS.keys()), # –û–ø—Ü–∏–∏ - —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π
    index=0 # –ú–æ–¥–µ–ª—å "–ë–µ–π—Å" –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
)

# –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
model_path = MODELS[selected_model_name]

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å (—Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –≤–∑—è—Ç –∏–∑ –∫—ç—à–∞, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–ª–∞—Å—å)
pii_pipeline = load_model(model_path)


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—á–∞—è –æ–±–ª–∞—Å—Ç—å ---
col1, col2 = st.columns([2, 3]) # –î–µ–ª–∏–º —ç–∫—Ä–∞–Ω –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏

with col1:
    st.subheader(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: **{selected_model_name}**")
    
    log_input = st.text_area(
        "üìù –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –ª–æ–≥ —Å—é–¥–∞:",
        height=400,
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 2025-05-22 13:42:14 ERROR User request processed, email franklinjames@example.net, card 4851961064628792322..."
    )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
    if st.button("üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞—Ç—å"):
        if pii_pipeline and log_input:
            # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –≤ –ø—Ä–∞–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
            pass
        elif not log_input:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        else:
            # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
            st.error("–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –≤—ã—à–µ.")

with col2:
    st.subheader("üîí –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞")
    # –≠—Ç–∞ —á–∞—Å—Ç—å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    if pii_pipeline and log_input and 'masked_text' not in st.session_state:
        st.session_state.masked_text = "–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥..."
        st.session_state.found_pii = []
        
    if st.button("–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å", key="process_button_hidden_trigger"): # –•–∏—Ç—Ä—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        with st.spinner(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏ '{selected_model_name}'..."):
            masked_text, found_pii = mask_log(pii_pipeline, log_input)
            st.session_state.masked_text = masked_text
            st.session_state.found_pii = found_pii
    
    # –í—Å–µ–≥–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ st.session_state
    if 'masked_text' in st.session_state:
        st.markdown(f'<div class="result-box">{st.session_state.masked_text}</div>', unsafe_allow_html=True)
        
        if st.session_state.found_pii:
            st.subheader("üîé –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏ —Å–∫—Ä—ã—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ")
            st.dataframe(st.session_state.found_pii, use_container_width=True, hide_index=True)
        # –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

st.sidebar.markdown("---")
st.sidebar.info("–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è PII.")