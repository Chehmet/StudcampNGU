import streamlit as st
from transformers import pipeline, AutoTokenizer, AutoModelForTokenClassification
import torch

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
# –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, –≥–¥–µ –ª–µ–∂–∏—Ç –≤–∞—à –ª—É—á—à–∏–π model.safetensors
# –Ø –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é, —á—Ç–æ –≤—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ª—É—á—à—É—é –º–æ–¥–µ–ª—å –≤ 'piiranha-finetuned-logs/best_model'
MODEL_PATH = "best_model"
DEVICE = 0 if torch.cuda.is_available() else -1 # 0 –¥–ª—è GPU, -1 –¥–ª—è CPU

# --- CSS –°—Ç–∏–ª–∏ –¥–ª—è —ç—Å—Ç–µ—Ç–∏–∫–∏ ---
# –¶–≤–µ—Ç–∞:
# –§–æ–Ω: #2c2f38
# –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç: #e0e0e0
# –ê–∫—Ü–µ–Ω—Ç/–∑–∞–≥–æ–ª–æ–≤–∫–∏: #6c73ff
# –§–æ–Ω –∏–Ω–ø—É—Ç–æ–≤: #34374f
# –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: #ff6565 (–∫—Ä–∞—Å–Ω–æ–≤–∞—Ç—ã–π –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–∞)

page_style = """
<style>
/* –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–Ω –∏ —à—Ä–∏—Ñ—Ç */
body, .main {
    background-color: #2c2f38;
    color: #e0e0e0;
}
h1, h2, h3 {
    color: #6c73ff;
    font-family: 'Segoe UI', sans-serif;
}

/* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ */
.stTextArea textarea {
    background-color: #34374f;
    color: #e0e0e0;
    border: 1px solid #4a4e69;
    border-radius: 10px;
    font-family: 'Consolas', 'Menlo', 'monospace';
    font-size: 16px;
    padding: 15px;
}

/* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ */
.stButton>button {
    background-color: #6c73ff;
    color: white;
    border-radius: 10px;
    border: none;
    padding: 10px 20px;
    font-weight: bold;
}
.stButton>button:hover {
    background-color: #5a61e0;
    color: white;
}

/* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –≤—ã–≤–æ–¥–∞ */
.result-box {
    background-color: #34374f;
    padding: 20px;
    border-radius: 10px;
    border-left: 5px solid #6c73ff;
    margin-top: 20px;
    font-family: 'Consolas', 'Menlo', 'monospace';
    font-size: 16px;
    line-height: 1.6;
    white-space: pre-wrap; /* –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ */
    word-wrap: break-word; /* –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ */
}

/* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π */
.entity-table {
    margin-top: 25px;
}
.entity-table th {
    background-color: #4a4e69;
    color: #e0e0e0;
    text-align: left;
}
.entity-table td {
    border-bottom: 1px solid #4a4e69;
}

</style>
"""

# --- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ ---
@st.cache_resource
def load_model(path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∫—ç—à–∏—Ä—É–µ—Ç –∏—Ö."""
    try:
        model = AutoModelForTokenClassification.from_pretrained(path)
        tokenizer = AutoTokenizer.from_pretrained(path)
        # aggregation_strategy="simple" –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç B- –∏ I- —Ç–æ–∫–µ–Ω—ã –≤ –æ–¥–Ω—É —Å—É—â–Ω–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, B-PASSWORD + I-PASSWORD -> PASSWORD)
        pii_pipeline = pipeline(
            "token-classification",
            model=model,
            tokenizer=tokenizer,
            aggregation_strategy="simple",
            device=DEVICE,
        )
        return pii_pipeline
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        st.info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ –≤–µ—Ä–Ω—ã–π –∏ –≤ –ø–∞–ø–∫–µ –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã (config.json, model.safetensors, tokenizer.json –∏ —Ç.–¥.)")
        return None

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è ---
def mask_log(pii_pipeline, text):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç, –Ω–∞—Ö–æ–¥–∏—Ç PII –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π."""
    if not text:
        return "", []

    entities = pii_pipeline(text)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–µ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    # —á—Ç–æ–±—ã –∑–∞–º–µ–Ω–∞ –Ω–µ —Å–±–∏–≤–∞–ª–∞ –∏–Ω–¥–µ–∫—Å—ã –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
    sorted_entities = sorted(entities, key=lambda e: e["start"], reverse=True)
    
    masked_text = text
    found_pii = []
    
    for entity in sorted_entities:
        label = entity["entity_group"]
        value = entity["word"]
        start = entity["start"]
        end = entity["end"]
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä [PASSWORD]
        mask = f"[{label}]"
        
        # –ó–∞–º–µ–Ω—è–µ–º PII –≤ —Ç–µ–∫—Å—Ç–µ –Ω–∞ –º–∞—Å–∫—É
        masked_text = masked_text[:start] + mask + masked_text[end:]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
        found_pii.append({"–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö": label, "–ù–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ": value})
        
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    return masked_text, sorted(found_pii, key=lambda x: text.find(x["–ù–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"]))


# --- –ò–ù–¢–ï–†–§–ï–ô–° STREAMLIT ---

# –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—à–∏ —Å—Ç–∏–ª–∏
st.markdown(page_style, unsafe_allow_html=True)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
pii_pipeline = load_model(MODEL_PATH)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("–î–µ—Ç–µ–∫—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ª–æ–≥–∞—Ö")
st.markdown("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ª–æ–≥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ PII.")

# –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
log_input = st.text_area(
    "üìù –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –ª–æ–≥ —Å—é–¥–∞:",
    height=250,
    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 2025-05-22 13:42:14 ERROR User request processed, email franklinjames@example.net, card 4851961064628792322..."
)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
if st.button("üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞—Ç—å"):
    if pii_pipeline and log_input:
        with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é..."):
            masked_text, found_pii = mask_log(pii_pipeline, log_input)
            
            st.subheader("üîí –ó–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥")
            st.markdown(f'<div class="result-box">{masked_text}</div>', unsafe_allow_html=True)
            
            if found_pii:
                st.subheader("üîé –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏ —Å–∫—Ä—ã—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ")
                # –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                st.dataframe(found_pii, use_container_width=True, hide_index=True)
            else:
                st.success("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —ç—Ç–æ–º –ª–æ–≥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    elif not log_input:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")

st.markdown("---")
st.info("–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª—å, –¥–æ–æ–±—É—á–µ–Ω–Ω—É—é –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π (PII).")